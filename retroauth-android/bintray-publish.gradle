apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = 'com.andretietz.retroauth'
version = libraryVersion

def siteUrl = 'https://github.com/andretietz/retroauth'
def codeRepositoryUrl = 'https://github.com/andretietz/retroauth.git'
def issuesUrl = 'https://github.com/andretietz/retroauth/issues'

def libraryDescription = "Android library build on top of retrofit, for simple handling of authenticated requests"

def mavenPackageType = 'aar'
def mavenDeveloperId = 'unicate'
def mavenDeveloperName = 'Andre'
def mavenDeveloperEmail = 'andre.tietz@gmail.com'
def mavenArtifactName = 'Android library build on top of retrofit, for simple handling of authenticated requests'

def bintrayRepository = 'java'
def bintrayLabels = ['aar', 'android', 'retrofit', 'accountmanager', 'rxjava', 'authentification']
def bintrayLicenses = ['Apache-2.0']




bintray {
    user = project.hasProperty('bintrayUser') ? project.bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? project.bintrayKey : System.getenv('BINTRAY_PASSWORD')
    publish = true
    configurations = ['archives']
    pkg {
        repo = bintrayRepository
        name = project.name
        desc = libraryDescription
        websiteUrl = siteUrl
        issueTrackerUrl = issuesUrl
        vcsUrl = codeRepositoryUrl
        licenses = bintrayLicenses
        labels = bintrayLabels
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging mavenPackageType
                name mavenArtifactName
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id mavenDeveloperId
                        name mavenDeveloperName
                        email mavenDeveloperEmail
                    }
                }
                scm {
                    connection codeRepositoryUrl
                    developerConnection codeRepositoryUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}